[{"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\index.js":"1","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\playground\\redux-101.js":"2","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\App.js":"3","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\state-management\\StateProvider.js":"4","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\state-management\\reducer.js":"5","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Login.jsx":"6","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Chat.jsx":"7","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\IconSidebar.jsx":"8","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Sidebar.jsx":"9","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\Firebase\\Firebase.js":"10","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\RoomChat.jsx":"11","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\RoomInfo.jsx":"12"},{"size":853,"mtime":1618435620574,"results":"13","hashOfConfig":"14"},{"size":882,"mtime":1617025107000,"results":"15","hashOfConfig":"14"},{"size":1250,"mtime":1618435868973,"results":"16","hashOfConfig":"14"},{"size":395,"mtime":1617025107000,"results":"17","hashOfConfig":"14"},{"size":746,"mtime":1617025107000,"results":"18","hashOfConfig":"14"},{"size":1663,"mtime":1618435795971,"results":"19","hashOfConfig":"14"},{"size":310,"mtime":1617025107000,"results":"20","hashOfConfig":"14"},{"size":1068,"mtime":1618435578218,"results":"21","hashOfConfig":"14"},{"size":2656,"mtime":1618435598426,"results":"22","hashOfConfig":"14"},{"size":653,"mtime":1617025107000,"results":"23","hashOfConfig":"14"},{"size":6996,"mtime":1618435770346,"results":"24","hashOfConfig":"14"},{"size":940,"mtime":1617025107000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c12ivi",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\index.js",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\playground\\redux-101.js",[],["53","54"],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\App.js",[],["55","56"],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\state-management\\StateProvider.js",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\state-management\\reducer.js",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Login.jsx",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Chat.jsx",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\IconSidebar.jsx",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\Sidebar.jsx",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\Firebase\\Firebase.js",[],"C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\RoomChat.jsx",["57"],"import { IconButton } from '@material-ui/core';\nimport { InsertEmoticon, Mic, Send, Star } from '@material-ui/icons'\nimport React, {useState, useEffect} from 'react'\nimport './component-stylesheet/RoomChat.css'\nimport { useParams } from 'react-router-dom'\nimport {database} from '../Firebase/Firebase'\nimport { useStateValue } from '../state-management/StateProvider';\n\nfunction RoomChat({type}) {\n  const { roomId } = useParams();\n  const [roomMessage, setRoomMessage] = useState([]);\n  const [roomName, setRoomName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [state] = useStateValue();\n  const [input, setInput] = useState(\"\");\n  // const [friendMessage, setFriendMessage] = useState([]);\n  \n  useEffect(() => {\n    if (type === \"room\") {\n      database.collection('rooms').doc(roomId).onSnapshot(snapshot => setRoomName(snapshot.data().name))\n\n      database.collection(\"rooms\").doc(roomId).collection(\"message\").onSnapshot(snapshot => setRoomMessage(snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }))))\n    } else {\n      database.collection('users').doc(roomId).onSnapshot(snapshot => {\n        setRoomName(snapshot.data().name);\n        setEmail(snapshot.data().email)\n      })\n\n      database.collection(\"users\").onSnapshot(snapshot => {\n        // getting your account id\n        let users = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }));\n\n        let you = users.filter(user => user.email === state.user.email)\n        console.log(you)\n\n      if (you){\n          database.collection(\"users\").doc(you[0].id).collection(\"allMessages\").onSnapshot(snapshot => {\n\n          // getting the id of the person you want to send the message to\n          const friends = snapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n\n          const friend = friends.filter(doc => doc.email === email);\n\n          database.collection(\"users\").doc(you[0].id).collection(\"allMessages\")\n            .doc(friend[0].id).collection(\"message\").onSnapshot(snapshot => setRoomMessage(snapshot.docs.map(doc => ({\n              id: doc.id,\n              ...doc.data()\n            }))))\n          \n        });\n      }\n\n      })\n    }\n  }, [roomId]);\n\n  if (type === \"room\") {\n    \n  } else {\n    \n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n  }\n  \n    return (\n      <div className=\"room__chat\">\n        <div className=\"room__chat__header\">\n          <div className=\"info\">\n            <div className=\"room__name\">\n              <span>#</span>\n              <h2>{roomName}</h2>\n            </div>\n            <div className=\"number__of__members\">\n              <span>6 members</span>\n              <button>+ Add member</button>\n            </div>\n          </div>\n          <div className=\"icons\">\n            <IconButton className=\"room__headerIcons\">\n              <Star />\n            </IconButton>\n            <IconButton className=\"room__headerIcons\">\n              <Star />\n            </IconButton>\n            <IconButton className=\"room__headerIcons\">\n              <Star />\n            </IconButton>\n            <IconButton className=\"room__headerIcons\">\n              <Star />\n            </IconButton>\n            <IconButton className=\"room__headerIcons\">\n              <Star />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"room__chat__body\">\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message sender\">\n            <span className=\"name\">You</span>\n            How are you doing\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          <p className=\"message\">\n            <span className=\"name\">john snow</span>\n            I'm fine, what about you\n            <span className=\"timestamp\">{new Date().toUTCString()}</span>\n          </p>\n\n          {roomMessage.map((message) => (\n            <p className=\"message sender\">\n              <span className=\"name\">You</span>\n              {message.message}\n              <span className=\"timestamp\">{new Date().toUTCString()}</span>\n            </p>\n          ))}\n        </div>\n        <div className=\"chat__footer\">\n          <div className=\"form__container\">\n            <Mic style={{ marginRight: \"5px\" }} />\n            <form action=\"\" onSubmit={handleSubmit}>\n              <input type=\"text\" placeholder=\"Enter message...\" value={input} onChange={ (e)=> setInput(e.target.value)}/>\n              <InsertEmoticon className=\"emoji\" />\n              <IconButton className=\"send__button\">\n                <Send style={{ color: \"white\" }} />\n              </IconButton>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n}\n\nexport default RoomChat\n","C:\\Users\\Black Vibes\\Documents\\react apps\\black-vibes-chat-app-master\\black-vibes-chat-app-master\\src\\components\\RoomInfo.jsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"58","replacedBy":"62"},{"ruleId":"60","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":64,"column":6,"nodeType":"66","endLine":64,"endColumn":14,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'email', 'state.user.email', and 'type'. Either include them or remove the dependency array.","ArrayExpression",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [email, roomId, state.user.email, type]",{"range":"73","text":"74"},[2247,2255],"[email, roomId, state.user.email, type]"]